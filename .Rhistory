projectedgroupmeans=Means%*%w
projectedmean=globalmean%*%w
projectedmean
globalmean
globalmean%*%w
projecteddata[1,]
rep(projecteddata[1, ], nrow=3, ncol(=2))
rep(projecteddata[1, ], nrow=3, ncol=2
)
?rep
rep(projecteddata[1, ], 3)
rbind(projecteddata[1,],3)
replicate(1,projecteddata[1,])
replicate(2,projecteddata[1,])
replicate(3,projecteddata[1,])
replicate(2,projecteddata[1,])
projecteddata[1,]
replicate(1,projecteddata[1,])
t(replicate(2,projecteddata[1,]))
projecteddata[1,]
t(replicate(3,projecteddata[1,]))
groupMeans()
groupmeans=my_groupMeans(iris[,1:4], iris$Species)
groupmeans=my_groupMeans(iris[,1:4], iris$Species)
library(DiscriMiner)
groupmeans=my_groupMeans(iris[,1:4], iris$Species)
library(DiscriMiner)
d=4
K=3
d1=min(K-1,d)
# Scatter matrices
Sb <- betweenCov(variables = iris[,1:4], group = iris$Species)
Sw <- withinCov(variables = iris[,1:4], group = iris$Species)
ev=eigen(solve(Sw)%*%Sb)$vectors
# Get the first d1 eigen vectors
w=ev[,1:d1]
data=matrix(unlist(iris[,1:4]), nrow=150, ncol=4)
w=matrix(as.numeric(w), nrow=4, ncol=2)
projecteddata=data%*%w
globalmean=colMeans(iris[,1:4])
groupmeans=my_groupMeans(iris[,1:4], iris$Species)
debugSource('~/connectomes/GSM/cloud_data/IrisAnalysis.R')
my_groupMeans(iris[,1:4], iris$Species)
Q
DiscriMiner::groupMeans(iris[,1:4], iris$Species)
groupMeans()
groupmeans=groupmeans(iris[,1:4], iris$Species)
groupmeans=groupMeans(iris[,1:4], iris$Species)
groupmeans
projecteddata[1,]
projectedpoint=t(replicate(3,projecteddata[1,]))
projectedpoint
projectedgroupmeans=groupmeans%*%w
projectedgroupmeans=groupmeans'%*%w
groupmeans
groupmeans''
groupmeans.t
groupmeans.T
t(groupmeans)
projectedgroupmeans=t(groupmeans)%*%w
projectedgroupmeans
projectedgroupmeans-projectedpoint
sqrt(sum(projectedgroupmeans-projectedpoint)^2)
projectedgroupmeans-projectedpoint
(projectedgroupmeans-projectedpoint)^2
sqrt((projectedgroupmeans-projectedpoint)^2)
library(pdist)
install.packages("pdist)
install.packages("pdist")
library(pdist)
?pdist
projectedgroupmeans
pdist(projectedgroupmeans, projectedpoint)
edist=pdist(projectedgroupmeans, projectedpoint)
edist
pdist(projecteddata[1,], projectedgroupmeans[1,])
projectedgroupmeans
pdist(projecteddata[2,], projectedgroupmeans[2,])
pdist(projecteddata[3,], projectedgroupmeans[3,])
projecteddata
projecteddata[1,]
pdist(projecteddata[1,], projectedgroupmeans[1,])
pdist(projecteddata[1,], projectedgroupmeans[2,])
pdist(projecteddata[1,], projectedgroupmeans[3,])
iris$Species
pdist(projecteddata[51,], projectedgroupmeans[1,])
pdist(projecteddata[51,], projectedgroupmeans[2,])
pdist(projecteddata[51,], projectedgroupmeans[3,])
pdist(projectedpoint, projectedgroupmeans)
pdist(projectedpoint, projectedgroupmeans, nrow=3, ncol=3)
x <- runif(10)
a <- pdist(x)
# a is a 10x10 matrix of distances
y <- runif(20)
a <- pdist(x,y)
x
y
pdist(x,y)
sqrt(rowS)
sqrt(rowSums((projectedpoint-projectedgroupmeans)^2))
min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
[val,ind]=min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
val,ind=min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
?min
which(min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2))))
which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
closestclass=which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
closestclass
iris$Species[1,]
iris$Species[1]
iris$Species[2]
iris$Species[51]
iris$Species[1]==closestclass
iris$Species[1]
closestclass
iris$Species[1]
strcmp
?strcmp
closestclass
closestclass[1]
closestclass[2]
closestclass[1]==iris$Species[1]
closestclass[1]===iris$Species[1]
typeof(closestclass)
typeof(iris$Species[1])
factor(iris$Species)
as.character(closestclass)
as.character(closestclass[1])
as.character(closestclass[0])
as.character(iris$Species[1])
as.character(iris$Species[2])
as.character(iris$Species[1])
closestclass[1]
closestclass[0]
closestclass.setosa
closestclass$setosa
which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
closestclass
closestclass["setosa"]
closestclass["1"]
min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))[0]
which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))[1]
min.col(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))[1]
min.row(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))[1]
which(min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
)
which(min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2))))
which(min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2))), arr.ind = TRUE)
which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))[1]
which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))[2]
which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))$setosa
closestclass
closestclass[0]
closestclass[1]
values.index(closestclass)
closestclass
iris$Species[1]
iris$Species[1][0]
iris$Species[1][1]
iris$Species[1][1][1]
iris$Species[1]==closestclass
sqrt(rowSums((projectedpoint-projectedgroupmeans)^2))
dists=sqrt(rowSums((projectedpoint-projectedgroupmeans)^2))
typeof(dists)
colnames(dists)
dists[1,]
dists[,1]
length(dists)
dists[1]
dists[2]
dists[1]==closestclass
closestclass
dists[1]
colnames(dists[1])
typeof(dists[1])
closestclass
iris$Species[1]
as.numeric(as.character(iris$Species))
as.numeric((iris$Species))
species=as.numeric((iris$Species))
species[1==closestclass
species[1]==closestclass
library(DiscriMiner)
d=4
K=3
d1=min(K-1,d)
# Scatter matrices
Sb <- betweenCov(variables = iris[,1:4], group = iris$Species)
Sw <- withinCov(variables = iris[,1:4], group = iris$Species)
ev=eigen(solve(Sw)%*%Sb)$vectors
# Get the first d1 eigen vectors
w=ev[,1:d1]
data=matrix(unlist(iris[,1:4]), nrow=150, ncol=4)
w=matrix(as.numeric(w), nrow=4, ncol=2)
species=as.numeric((iris$Species))
projecteddata=data%*%w
globalmean=colMeans(iris[,1:4])
groupmeans=groupmeans(iris[,1:4], iris$Species)
library(DiscriMiner)
d=4
K=3
d1=min(K-1,d)
# Scatter matrices
Sb <- betweenCov(variables = iris[,1:4], group = iris$Species)
Sw <- withinCov(variables = iris[,1:4], group = iris$Species)
ev=eigen(solve(Sw)%*%Sb)$vectors
# Get the first d1 eigen vectors
w=ev[,1:d1]
data=matrix(unlist(iris[,1:4]), nrow=150, ncol=4)
w=matrix(as.numeric(w), nrow=4, ncol=2)
species=as.numeric((iris$Species))
projecteddata=data%*%w
globalmean=colMeans(iris[,1:4])
groupmeans=groupMeans(iris[,1:4], iris$Species)
projectedgroupmeans=t(groupmeans)%*%w
#Apply nearest neighbors to test data
correct=0
for (i in 1:nrow(projecteddata)) {
projectedpoint=t(replicate(3,projecteddata[1,]))
closestclass=which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
if(species[i]==closestclass) {
correct=correct+1
}
}
accuracy=correct/150
accuracy
library(DiscriMiner)
d=4
K=3
d1=min(K-1,d)
# Scatter matrices
Sb <- betweenCov(variables = iris[,1:4], group = iris$Species)
Sw <- withinCov(variables = iris[,1:4], group = iris$Species)
ev=eigen(solve(Sw)%*%Sb)$vectors
# Get the first d1 eigen vectors
w=ev[,1:d1]
data=matrix(unlist(iris[,1:4]), nrow=150, ncol=4)
w=matrix(as.numeric(w), nrow=4, ncol=2)
species=as.numeric((iris$Species))
projecteddata=data%*%w
globalmean=colMeans(iris[,1:4])
groupmeans=groupMeans(iris[,1:4], iris$Species)
projectedgroupmeans=t(groupmeans)%*%w
#Apply nearest neighbors to test data
correct=0
for (i in 1:nrow(projecteddata)) {
projectedpoint=t(replicate(3,projecteddata[i,]))
closestclass=which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
if(species[i]==closestclass) {
correct=correct+1
}
}
accuracy=correct/150
accuracy
library(DiscriMiner)
d=4
K=3
d1=min(K-1,d)
# Scatter matrices
Sb <- betweenCov(variables = iris[,1:4], group = iris$Species)
Sw <- withinCov(variables = iris[,1:4], group = iris$Species)
ev=eigen(solve(Sw)%*%Sb)$vectors
# Get the first d1 eigen vectors
w=ev[,1:d1]
data=matrix(unlist(iris[,1:4]), nrow=150, ncol=4)
w=matrix(as.numeric(w), nrow=4, ncol=2)
species=as.numeric((iris$Species))
projecteddata=data%*%w
globalmean=colMeans(iris[,1:4])
groupmeans=groupMeans(iris[,1:4], iris$Species)
projectedgroupmeans=t(groupmeans)%*%w
#Apply nearest neighbors to test data
correct=0
for (i in 1:nrow(projecteddata)) {
projectedpoint=t(replicate(3,projecteddata[i,]))
closestclass=which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
print(closestclass)
if(species[i]==closestclass) {
correct=correct+1
}
}
accuracy=correct/150
debugSource('~/connectomes/GSM/cloud_data/IrisAnalysis.R')
ng
nk
mean_k
groupMeans(iris[,1:4])
DiscriMiner::groupMeans(iris[,1:4])
DiscriMiner::groupMeans(iris[,1:4])
DiscriMiner::groupMeans(iris[,1:4], iris$Species)
nk
?tcrossprod
glevs
tmp
dif_k
(z <- crossprod(1:4))    # = sum(1 + 2^2 + 3^2 + 4^2)
drop(z)                  # scalar
x <- 1:4; names(x) <- letters[1:4]; x
tcrossprod(as.matrix(x)) # is
identical(tcrossprod(as.matrix(x)),
crossprod(t(x)))
tcrossprod(x)            # no dimnames
(z <- crossprod(1:4))    # = sum(1 + 2^2 + 3^2 + 4^2)
drop(z)                  # scalar
x <- 1:4; names(x) <- letters[1:4]; x
tcrossprod(as.matrix(x)) # is
identical(tcrossprod(as.matrix(x)),
crossprod(t(x)))
tcrossprod(x)            # no dimnames
crossprod(t(x))
tcrossprod(as.matrix(x))
x=c(0.2,0.3,0.5,1)
tcrossprod(as.matrix(x))
crossprod(t(x))
as.matrix(x)
dim(as.matrix(x))
as.matrix(x)%*%t(as.matrix(x))
debugSource('~/connectomes/GSM/cloud_data/IrisAnalysis.R')
dif_k
tcrossprod(dif_k)
dif_k%*%t(dif_k)
crossprod(dif_k)
crossprod(t(dif_k))
debugSource('~/connectomes/GSM/cloud_data/IrisAnalysis.R')
debugSource('~/connectomes/GSM/cloud_data/IrisAnalysis.R')
X[tmp,]
var(X[tmp,])
?var
cov(X[tmp,])
sapply(X[tmp,], var)
debugSource('~/connectomes/GSM/cloud_data/IrisAnalysis.R')
sapply(X[tmp,], var)
X[tmp,]
tapply(X[tmp,], var)
sapply(X[tmp,], FUN = var)
sapply(as.matrix(X[tmp,], nrow=50, ncol=4), FUN = var)
debugSource('~/connectomes/GSM/cloud_data/IrisAnalysis.R')
sapply(as.matrix(X[tmp,], nrow=50, ncol=4), FUN = var)
sapply(as.matrix(X[tmp,], nrow=50, ncol=4), FUN = cov)
tmp
debugSource('~/connectomes/GSM/cloud_data/IrisAnalysis.R')
debugSource('~/connectomes/GSM/cloud_data/IrisAnalysis.R')
g
tapply(X, 1:50, var)
tapply(X[1:50,], 1:50, var)
X[,j]
X[,1]
tapply(X[1:50,], iris$Species[1:50], var)
iris$Species[1:50]
tapply(X[1:50,], var)
sapply(X[1:50,], var)
sapply(X[1:50,], iris$Species[1:50], var)
sapply(X[1:50,], var)
w
data
w
projecteddata
plot(projecteddata[,1], projecteddata[,2])
#Apply nearest neighbors to test data
correct=0
testlabels=matrix(0, nrow=150, ncol=1)
for (i in 1:nrow(projecteddata)) {
projectedpoint=t(replicate(3,projecteddata[i,]))
closestclass=which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
print(closestclass)
testlabels=rbind(testlabels, closestclass)
if(species[i]==closestclass) {
correct=correct+1
}
}
accuracy=correct/N
testlabels
plot(projecteddata[,1], projecteddata[,2], col=testlabels)
dim(testlabels)
#Apply nearest neighbors to test data
correct=0
testlabels=matrix(0, nrow=150, ncol=1)
for (i in 1:nrow(projecteddata)) {
projectedpoint=t(replicate(3,projecteddata[i,]))
closestclass=which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
print(closestclass)
rbind(testlabels, closestclass)
if(species[i]==closestclass) {
correct=correct+1
}
}
dim(testlabels)
plot(projecteddata[,1], projecteddata[,2], col=testlabels)
testlabels
#Apply nearest neighbors to test data
correct=0
testlabels=matrix(0, nrow=150, ncol=1)
for (i in 1:nrow(projecteddata)) {
projectedpoint=t(replicate(3,projecteddata[i,]))
closestclass=which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
print(closestclass)
testlabels=rbind(testlabels, closestclass)
if(species[i]==closestclass) {
correct=correct+1
}
}
dim(testlabels)
source('~/.active-rstudio-document', echo=TRUE)
#Apply nearest neighbors to test data
correct=0
testlabels=c()
testlabels=matrix(0, nrow=150, ncol=1)
for (i in 1:nrow(projecteddata)) {
projectedpoint=t(replicate(3,projecteddata[i,]))
closestclass=which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
print(closestclass)
testlabels=rbind(testlabels, closestclass)
if(species[i]==closestclass) {
correct=correct+1
}
}
dim(testlabels)
?rbind
#Apply nearest neighbors to test data
correct=0
testlabels=matrix(0, nrow=150, ncol=1)
for (i in 1:nrow(projecteddata)) {
projectedpoint=t(replicate(3,projecteddata[i,]))
closestclass=which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
print(closestclass)
rbind(testlabels, closestclass)
if(species[i]==closestclass) {
correct=correct+1
}
}
testlabels
for (i in 1:nrow(projecteddata)) {
projectedpoint=t(replicate(3,projecteddata[i,]))
closestclass=which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
print(closestclass)
rbind(testlabels, closestclass)
if(species[i]==closestclass) {
correct=correct+1
}
}
testlabels
correct=0
testlabels=matrix(0, nrow=150, ncol=1)
for (i in 1:nrow(projecteddata)) {
projectedpoint=t(replicate(3,projecteddata[i,]))
closestclass=which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
print(closestclass)
testlabels[i,1] =closestclass
if(species[i]==closestclass) {
correct=correct+1
}
}
testlabels
plot(projecteddata[,1], projecteddata[,2], col=testlabels)
plot(projecteddata[,1], projecteddata[,2], col=factor(testlabels))
correct
plot(projecteddata[,1], projecteddata[,2], col=testlabels, pch='*')
testlabels[1:50]
testlabels[51:100]
text(projecteddata[,1], projecteddata[,2], labels=testlabels, cex= 0.7)
text(projecteddata[,1], projecteddata[,2], labels=iris$Species, cex= 0.7)
text(projecteddata[,1], projecteddata[,2], labels=species, cex= 0.7)
species
text(projecteddata[,1], projecteddata[,2], labels=species, cex= 0.7, pch="*")
text(projecteddata[,1], projecteddata[,2], labels=testlabels, cex= 0.7, pch=".")
text(projecteddata[,1], projecteddata[,2], labels=testlabels, cex= 0.7, pch="*")
plot(projecteddata[,1], projecteddata[,2], col=species, pch='*')
plot(projecteddata[,1], projecteddata[,2], col=testlabels, pch='o')
p=plot(projecteddata[,1], projecteddata[,2], col=species, pch='*')
p+plot(projecteddata[,1], projecteddata[,2], col=testlabels, pch='o')
p=plot(projecteddata[,1], projecteddata[,2], col=species, pch='*')
points(projecteddata[,1], projecteddata[,2], col=testlabels, pch='o')
library(DiscriMiner)
d=4
K=3
N=150
d1=min(K-1,d)
# Scatter matrices
Sb <- betweenCov(variables = iris[,1:4], group = iris$Species)
Sw <- withinCov(variables = iris[,1:4], group = iris$Species)
ev=eigen(solve(Sw)%*%Sb)$vectors
# Get the first d1 eigen vectors
w=ev[,1:d1]
data=matrix(unlist(iris[,1:4]), nrow=150, ncol=4)
w=matrix(as.numeric(w), nrow=4, ncol=2)
species=as.numeric((iris$Species))
projecteddata=data%*%w
globalmean=colMeans(iris[,1:4])
groupmeans=groupMeans(iris[,1:4], iris$Species)
projectedgroupmeans=t(groupmeans)%*%w
#Apply nearest neighbors to test data
correct=0
testlabels=matrix(0, nrow=150, ncol=1)
for (i in 1:nrow(projecteddata)) {
projectedpoint=t(replicate(3,projecteddata[i,]))
closestclass=which.min(sqrt(rowSums((projectedpoint-projectedgroupmeans)^2)))
print(closestclass)
testlabels[i,1] =closestclass
if(species[i]==closestclass) {
correct=correct+1
}
}
accuracy=correct/N
p=plot(projecteddata[,1], projecteddata[,2], col=species, pch='*')
points(projecteddata[,1], projecteddata[,2], col=testlabels, pch='o')
p=plot(projecteddata[,1], projecteddata[,2], col=species, pch='*')
points(projecteddata[,1], projecteddata[,2], col=testlabels, pch='o')
p=plot(projecteddata[,1], projecteddata[,2], col=species, pch='*')
points(projecteddata[,1], projecteddata[,2], col=testlabels, pch='o')
