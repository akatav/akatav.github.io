colors=c("yellow","yellow", "yellow", "green", "green", "green", "black", "black", "black", "black")
colors
factor(colors)
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, mapping = aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, mapping = aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
colors
factor(colors)
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
g
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors)))
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
g
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
colors
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors)))
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "gray")
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors)))
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
colors
factor(colors)
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
g
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
g <- g + geom_segment(aes(x = 0, y = 0, xend = min(df), yend = eigen$vectors.scaled[1,1] * min(df)), colour = "yellow", arrow = arrow(length = unit(0.2, "cm")))  # add arrow for pc1
g <- g + geom_segment(aes(x = 0, y = 0, xend = min(df), yend = eigen$vectors.scaled[1,2] * min(df)), colour = "violet", arrow = arrow(length = unit(0.2, "cm")))  # add arrow for pc1
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
g
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors)))
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
g
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
g
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
g
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g
colors
colors=c(0,0,0,0,1,1,1,2,2,2,2,2)
Person1 <- c(1,-1,0.75,-2,2,2.5,3,0,1,1.5,4,2)
Person2 <- c(1,0.5,-1,-2,1.5,2.4,1.8,4,4,4.2,4, 4.5)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
g
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
Person1 <- c(1,-1,0.75,-2,2,2.5,3,0,1,1.5,4,2)
Person2 <- c(1,0.5,-1,-2,1.5,2.4,1.8,4,4,4.2,4, 4.5)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
Person1 <- c(1,-1,0.75,-2,2,2.5,3,0,1,1.5,4,2)
Person2 <- c(1,0.5,-1,-2,1.5,2.4,1.8,4,4,4.2,4, 4.5)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
Person1 <- c(1,-1,0.75,-2,2,2.5,3,0,1,1.5,4,2)
Person2 <- c(1,0.5,-1,-2,1.5,2.4,1.8,4,4,4.2,4, 4.5)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
library(ggplot2)
Person1 <- c(1,-1,0.75,-2,2,2.5,3,0,1,1.5,4,2)
Person2 <- c(1,0.5,-1,-2,1.5,2.4,1.8,4,4,4.2,4, 4.5)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
library(ggplot2)
Person1 <- c(1,-1,0.75,-2,2,2.5,3,0,1,1.5,4,2)
Person2 <- c(1,0.5,-1,-2,1.5,2.4,1.8,4,4,4.2,4, 4.5)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g
library(markdown)
render("_includes/Fishers1.Rmd")
library(rmarkdown)
render("_includes/Fishers1.Rmd")
