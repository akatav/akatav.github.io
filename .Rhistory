corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
g
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
g
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
g
Person1 <- c(1,-1,0.75,2,2.5,3,0,1,1.5,4)
Person2 <- c(1,0.5,-1,1.5,2.4,1.8,4,4,4.2,4)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g
colors
colors=c(0,0,0,0,1,1,1,2,2,2,2,2)
Person1 <- c(1,-1,0.75,-2,2,2.5,3,0,1,1.5,4,2)
Person2 <- c(1,0.5,-1,-2,1.5,2.4,1.8,4,4,4.2,4, 4.5)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
g
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
Person1 <- c(1,-1,0.75,-2,2,2.5,3,0,1,1.5,4,2)
Person2 <- c(1,0.5,-1,-2,1.5,2.4,1.8,4,4,4.2,4, 4.5)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
Person1 <- c(1,-1,0.75,-2,2,2.5,3,0,1,1.5,4,2)
Person2 <- c(1,0.5,-1,-2,1.5,2.4,1.8,4,4,4.2,4, 4.5)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + geom_smooth(method = "lm")  # just for comparsion
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
Person1 <- c(1,-1,0.75,-2,2,2.5,3,0,1,1.5,4,2)
Person2 <- c(1,0.5,-1,-2,1.5,2.4,1.8,4,4,4.2,4, 4.5)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g <- g + geom_point(alpha = 1/3)  # alpha b/c of overplotting
g <- g + coord_fixed()  # otherwise, the angles of vectors are off
corre <- cor(x = df$Person1, y = df$Person2, method = "spearman")  # calculate correlation, must be spearman b/c of measurement
matrix <- matrix(c(1, corre, corre, 1), nrow = 2)  # make this into a matrix
eigen <- eigen(matrix)  # calculate eigenvectors and values
eigen$vectors.scaled <- eigen$vectors %*% diag(sqrt(eigen$values))
g <- g + stat_ellipse(type = "norm")
g <- g + stat_ellipse(type = "t")
g <- g + geom_abline(intercept = eigen$values[1], slope = 1, colour = "yellow")  # add slope for pc1
g <- g + geom_abline(intercept = eigen$values[2], slope = -1, colour = "violet")  # add slope for pc2
perp.segment.coord <- function(x0, y0, a=0,b=1){
#finds endpoint for a perpendicular segment from the point (x0,y0) to the line
# defined by lm.mod as y=a+b*x
x1 <- (x0+b*y0-a*b)/(1+b^2)
y1 <- a + b*x1
list(x0=x0, y0=y0, x1=x1, y1=y1)
}
ss<-perp.segment.coord(df$Person1, df$Person2, eigen$values[1], 1)
g + geom_segment(data=as.data.frame(ss), aes(x = x0, y = y0, xend = x1, yend = y1), colour = "orange")
library(ggplot2)
Person1 <- c(1,-1,0.75,-2,2,2.5,3,0,1,1.5,4,2)
Person2 <- c(1,0.5,-1,-2,1.5,2.4,1.8,4,4,4.2,4, 4.5)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
library(ggplot2)
Person1 <- c(1,-1,0.75,-2,2,2.5,3,0,1,1.5,4,2)
Person2 <- c(1,0.5,-1,-2,1.5,2.4,1.8,4,4,4.2,4, 4.5)
df <- data.frame(cbind(Person1, Person2))
g <- ggplot(data = df, aes(x = Person1, y = Person2, colour=factor(colors))) + geom_point()
g
library(markdown)
render("_includes/Fishers1.Rmd")
library(rmarkdown)
render("_includes/Fishers1.Rmd")
knitr::opts_knit$set(base.dir = "../akatav.github.io/", base.url = "/")
knitr::opts_chunk$set(fig.path = "images/R/")
library(rmarkdown)
render(input = "_source/Fishers1.Rmd", output_dir = "_posts", output_format = md_document(preserve_yaml = TRUE))
knitr::opts_knit$set(base.dir = "../akatav.github.io/", base.url = ".")
knitr::opts_chunk$set(fig.path = "images/R/")
library(rmarkdown)
render(input = "_source/Fishers1.Rmd", output_dir = "_posts", output_format = md_document(preserve_yaml = TRUE))
knitr::opts_knit$set(base.dir = "../akatav.github.io/", base.url = "/")
knitr::opts_chunk$set(fig.path = "images/R/")
library(rmarkdown)
render(input = "_source/Fishers1.Rmd", output_dir = "_posts", output_format = md_document(preserve_yaml = TRUE))
library(rmarkdown)
render(input = "_source/Fishers1.Rmd", output_dir = "_posts", output_format = md_document(preserve_yaml = TRUE))
library(rmarkdown)
render(input = "_source/Fishers1.Rmd", output_dir = "_includes/", output_format = md_document(preserve_yaml = TRUE))
library(rmarkdown)
render(input = "_source/Fishers1.Rmd", output_dir = "_includes/", output_format = md_document(preserve_yaml = TRUE))
unlink('_source/Fishers1_cache', recursive = TRUE)
library(rmarkdown)
render(input = "_source/Fishers1.Rmd", output_dir = "_includes/", output_format = md_document(preserve_yaml = TRUE))
install_github("ggbiplot", "vqv")
install.packages("ggbiplot", "vqv")
install.packages("ggbiplot")
install.packages("ggbiplot")
install.packages("ggbiplot")
install.packages("ggbiplot")
install_github("vqv/ggbiplot")
install.packages("devtools")
install_github("vqv/ggbiplot")
library(devtools)
install_github("vqv/ggbiplot")
?prcomp
df
data(wine)
wine.pca <- prcomp(wine, scale. = TRUE)
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
library(ggbiplot)
data(wine)
wine.pca <- prcomp(wine, scale. = TRUE)
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
typeof(wine)
typeof(df)
typeof(df)
data(wine)
wine.pca <- prcomp(df, scale. = TRUE)
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
data(wine)
wine.pca <- prcomp(unlist(df), scale. = TRUE)
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
unlist(Df)
unlist(df)
as.matrix(unlist(df), nrow=length(x), ncol=2)
as.matrix(df, nrow=length(x), ncol=2)
dat=as.matrix(df, nrow=length(x), ncol=2)
data(wine)
wine.pca <- prcomp(dat, scale. = TRUE)
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
wine.pca <- prcomp(dat, scale. = TRUE)
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
prcomp(dat, scale. = TRUE)
pca.dat=prcomp(dat, scale. = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1,
+   groups = wine.class, ellipse = TRUE, circle = TRUE) +
+   scale_color_discrete(name = '') +
+   theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE) +
+   scale_color_discrete(name = '') +
+   theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
dat
x <- c(6,10,12,15,17,16,18,20,21,20,17,23,12,7,11,8,15,13.5)
y <- c(5.5,8,12,8,12,16,15,18,17,15,10,17,15,4,5,10,10.5,9)
df <- data.frame(cbind(x, y))
pca.dat=prcomp(dat, scale. = TRUE)
pca.dat=prcomp(df, scale. = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
pca.dat$sdev
pca.dat$rotation
pca.dat$x
wine
wine[,1:2]
pca.dat=prcomp(wine[,1:2], scale. = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = wine.class) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
wine.class
pca.dat=prcomp(wine[,3:4], scale. = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = wine.class) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
wine
pca.dat=prcomp(wine[,10:11], scale. = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = wine.class) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
pca.dat
pca.dat$sdev
pca.dat=prcomp(iris[,1:2], scale. = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = iris[,5]) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
pca.dat=prcomp(iris[,3:4], scale. = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = iris[,5]) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
pca.dat=prcomp(iris[,2:3], scale. = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = iris[,5]) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
pca.dat=prcomp(iris[,c(1,3)], scale. = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = iris[,5]) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
pca.dat=prcomp(iris[,c(1,4)], scale. = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = iris[,5]) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
pca.dat=prcomp(iris[,c(2,3)], scale. = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = iris[,5]) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
pca.dat
plot(pca.dat)
summary(pca.dat)
plot(pca.dat, type='l')
library( pls )
library(ISLR)
set.seed(2018)
x = model.matrix(Salary~., Hitters) [,-1]
y= Hitters$Salary
set.seed(1)
train = sample(1:nrow(x), nrow(x)/2)
test =(-train)
y.test = y[test]
train=Hitters[1:250,]
trainX=subset(train, select=-c(Salary))
trainY=train$Salary
test=Hitters[251:322,]
testX=subset(test, select=-c(Salary))
testY=test$Salary
pcr.fit = pcr(trainY~.,data = trainX , scale = TRUE , validation ="CV")
validationplot(pcr.fit, val.type = "MSEP")
summary(pcr.fit)
pcr.pred=predict(pcr.fit, x[test,], ncomp = 7)
print(mean(pcr.pred-test)^2)
plsr.fit=plsr(Salary~.,data = Hitters , scale = TRUE , validation ="CV")
validationplot(plsr.fit, val.type = "MSEP")
summary(plsr.fit)
summary(pcr.fit)
pcr.fit
pcr.fit$scores
pca.dat=prcomp(iris[,c(2,3)], scale. = TRUE)
iris[,5]=="setosa"
iris(iris[,5]=="setosa")
iris[iris[,5]=="setosa"]
which(iris[,5]=="setosa")
iris(which(iris[,5]=="setosa"):)
iris(which(iris[,5]=="setosa":)
iris(which(iris[,5]=="setosa"):)
which(iris[,5]=="setosa")
iris(c(which(iris[,5]=="setosa")):)
c(which(iris[,5]=="setosa")
)
iris[c(which(iris[,5]=="setosa"))]
iris[(which(iris[,5]=="setosa"))]
iris[,5]=="setosa"
iris[iris[,5]=="setosa"]
iris[iris[,5]=="setosa":]
iris[iris[,5]=="setosa":,]
?which
iris[iris$Species=="setosa",]
iris.setosa=iris[iris$Species=="setosa",]
pca.dat=prcomp(iris.setosa, scale. = TRUE)
typeof(iris.setosa)
iris.ser
typeof(iris.setosa)
pca.dat=prcomp(iris.setosa, scale. = TRUE)
as.numeric(iris.setosa)
iris.setosa-as.numeric(unlist(iris.setosa))
iris.setosa=as.numeric(unlist(iris.setosa))
iris.setosa
iris.setosa=iris[iris$Species=="setosa",]
pca.dat=prcomp(iris.setosa, scale. = TRUE)
as.list(iris.setosa)
iris.setosa=as.list(iris.setosa)
pca.dat=prcomp(iris.setosa, scale. = TRUE)
?prcomp
pca.dat=prcomp(iris.setosa, scale. = TRUE)
pca.dat=prcomp(as.numeric(iris.setosa), scale. = TRUE)
pca.dat=prcomp(as.numeric(unlist(iris.setosa), scale. = TRUE)
pca.dat=prcomp(as.numeric(unlist(iris.setosa)), scale. = TRUE)
pca.dat
pca.dat=prcomp(as.matrix(as.numeric(unlist(iris.setosa)), nrow=50, ncol=4), scale. = TRUE)
pca.dat
as.matrix(as.numeric(unlist(iris.setosa)), nrow=50, ncol=4)
as.matrix(iris.setosa, nrow=50, ncol=4)
s=matrix(iris.setosa, nrow=50, ncol=4)
s
data=iris[!(iris$Species=="versicolor"),] #without setosa
data=iris[!(iris$Species=="versicolor"),] #without setosa
pca.dat=prcomp(data, scale. = TRUE)
typeof(data)
matrix(unlist(data), nrow=50, ncol=4))
matrix(unlist(data), nrow=50, ncol=4)
data=matrix(unlist(data), nrow=50, ncol=4)
pca.dat=prcomp(data, scale. = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = iris[,5]) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
data
data=iris[!(iris$Species=="versicolor"),] #without setosa
data
data=matrix(unlist(data), nrow=50, ncol=4)
pca.dat=prcomp(data[,1:4], scale. = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = data[,5]) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = data[:,5]) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = data[:5]) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = data(:5)) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
data
data=iris[!(iris$Species=="versicolor"),] #without setosa
data
data=matrix(unlist(data), nrow=50, ncol=5)
pca.dat=prcomp(data[,1:4], scale. = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = data[,5] + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = data[,5]) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = data(:5)) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
data[,5]
data
data=iris[!(iris$Species=="versicolor"),] #without setosa
data
dim(data)
data=matrix(unlist(data), nrow=100, ncol=5)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = data[,5] + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = data[,5]) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
pca.dat=prcomp(data[,1:4], scale. = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = data[,5]) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
pca.dat
data[,5]
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = fatctor(data[,5])) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = factor(data[,5])) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = factor(data[,5])) + theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca.dat)
pca.dat
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = factor(data[,5]))
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = factor(data[,5])) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
pca.dat=prcomp(iris[,c(2,3)], scale. = TRUE)
ggbiplot(pca.dat, obs.scale = 1, var.scale = 1, ellipse = TRUE, circle = TRUE, groups = iris[,5]) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
matrix(unlist(df), nrow=length(x), ncol=2)
x <- c(6,10,12,15,17,16,18,20,21,20,17,23,12,7,11,8,15,13.5)
y <- c(5.5,8,12,8,12,16,15,18,17,15,10,17,15,4,5,10,10.5,9)
df <- data.frame(cbind(x, y))
matrix(unlist(df), nrow=length(x), ncol=2)
dat.pca=prcomp(matrix(unlist(df), nrow=length(x), ncol=2), center = TRUE, scale. = TRUE)
g=ggbiplot(dat.pca, obs.scale=1, var.scale=1, groups=dat.pca, ellipse=TRUE, circle=TRUE)
dat.pca
g=ggbiplot(dat.pca, obs.scale=1, var.scale=1, ellipse=TRUE, circle=TRUE)
g=g+scale_color_discrete(name='')
g=g+theme(legend.direction = 'horizontal', legend.position = 'top')
g
ggbiplot(dat.pca, obs.scale=1, var.scale=1, ellipse=TRUE, circle=TRUE)
?ggbiplot
dat.pca=prcomp(matrix(unlist(df), nrow=length(x), ncol=2), center = TRUE, scale. = TRUE)
dat.pca
ggbiplot(dat.pca)
typeof(wine.pca)
typeof(dat.pca)
ggbiplot(dat.pca, obs.scale = 1)
g=ggbiplot(dat.pca, obs.scale=1, var.scale=1, ellipse=TRUE, circle=TRUE)
g
